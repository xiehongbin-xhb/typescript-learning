//TS支持 数字枚举 以及基于字符串的枚举
// 1. 数字枚举
// 定义枚举
enum Direction {
  Up,
  Down,
  Left,
  RIght
}
// 初始化器： 默认Up从0开始，也可以通过 Up = 1，来确定初始化器的起始值

// 使用枚举：通过枚举的属性来访问枚举成员，或者 通过枚举的名字访问枚举类型
enum Respone {
  No = 0,
  Yes = 1
}
// 通过Respone.Yes 来返回指定的值
// 或者通过 Respone[1]来返回指定的常量名
console.log('Response', Respone[1]);
// function respond(recepient: string, message: Respone): void {

// }

// 2. 字符串枚举
// 在一个字符串枚举中，每个成员都必须用字符串字面量，或者另外一个字符串枚举成员进行初始化
enum Direction1 {
  Up = 'Up',
  Down = 'Down',
  Left = 'Left',
  Right = 'Right'
}

// 每个枚举成员都带有一个值，它可以是常量或者计算出来的
/**
 * 当满足如下条件时，枚举成员被当作是常量
 * 1. 它是枚举的第一个成员且没有初始化器，这种情况它被赋予值0
 * 2. 它不带有初始化器，且它之前的枚举成员是一个数字常量，这种情况，当前枚举成员的值为它上一个枚举成员的值加1
 * 3. 枚举成员使用 常量枚举表达式，枚举表达式是TS表达式的子集，可以在编译阶段求值。
 * 常量枚举表达式的条件：
 * - 一个枚举表达式字面量（字符串字面量或者数字字面量）
 * - 一个对之前定义的常量枚举成员的引用，可以是在不同的枚举类型中定义的
 * - 带括号的常量枚举表达式
 * - 应用了一元运算符的常量枚举表达式
 * - 
 */

 /**
  * 当所有枚举成员都拥有字面量枚举类型时，它们就带有了一种特殊的语义
  * 1. 枚举成员成为了类型
  * 2. 枚举类型本身编程了每个枚举成员的联合
  * 
  */